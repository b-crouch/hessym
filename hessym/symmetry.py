# Python utility functions for geometric symmetry
'''
    Operating data transformation based on tetrahedron and octahedron symmetry 
        (Hanfeng Zhai | hzhai@stanford.edu)
        (Wei Cai | caiwei@stanford.edu)
'''
import matplotlib.pyplot as plt
import numpy as np
import tabulate
import matplotlib.cm as cm
import sympy as sp

def init_color_object():
    color = type('', (), {})() # initialize an empty object to contain colors in a terminal
    color.BLUE   = "\033[94m"
    color.GREEN  = "\033[92m"
    color.YELLOW = "\033[93m"
    color.RESET  = "\033[0m"
    color.PURPLE = "\033[95m"
    color.RED    = "\033[91m"
    return color

color = init_color_object()

class tetra_symm_group():
    def __init__(self):
        self.symmetry_matrices = [
            np.array([[1, 0, 0 ], [0, 1, 0 ], [0, 0, 1 ]]), # E
            np.array([[1, 0, 0 ], [0, -1, 0], [0, 0, -1]]), # Tx2
            np.array([[-1, 0, 0], [0, 1, 0 ], [0, 0, -1]]), # Ty2
            np.array([[-1, 0, 0], [0, -1, 0], [0, 0, 1 ]]), # Tz2
            np.array([[0, 1, 0 ], [0, 0, 1 ], [1, 0, 0 ]]), # R1
            np.array([[0, -1, 0], [0, 0, 1 ], [-1, 0, 0]]), # R2
            np.array([[0, 1, 0 ], [0, 0, -1], [-1, 0, 0]]), # R3
            np.array([[0, -1, 0], [0, 0, -1], [1, 0, 0 ]]), # R4
            np.array([[0, 0, 1 ], [1, 0, 0 ], [0, 1, 0 ]]), # R12
            np.array([[0, 0, -1], [-1, 0, 0], [0, 1, 0 ]]), # R22
            np.array([[0, 0, -1], [1, 0, 0 ], [0, -1, 0]]), # R32
            np.array([[0, 0, 1 ], [-1, 0, 0], [0, -1, 0]]), # R42
            np.array([[1, 0, 0 ], [0, 0, -1], [0, -1, 0]]), # a
            np.array([[0, -1, 0], [-1, 0, 0], [0, 0, 1 ]]), # b
            np.array([[0, 0, -1], [0, 1, 0 ], [-1, 0, 0]]), # c
            np.array([[0, 0, 1 ], [0, 1, 0 ], [1, 0, 0 ]]), # d
            np.array([[0, 1, 0 ], [1, 0, 0 ], [0, 0, 1 ]]), # e
            np.array([[1, 0, 0 ], [0, 0, 1 ], [0, 1, 0 ]]), # f
            np.array([[-1, 0, 0], [0, 0, -1], [0, 1, 0 ]]), # r
            np.array([[-1, 0, 0], [0, 0, 1 ], [0, -1, 0]]), # s
            np.array([[0, 0, -1], [0, -1, 0], [1, 0, 0 ]]), # t
            np.array([[0, 0, 1 ], [0, -1, 0], [-1, 0, 0]]), # u
            np.array([[0, -1, 0], [1, 0, 0 ], [0, 0, -1]]), # v
            np.array([[0, 1, 0 ], [-1, 0, 0], [0, 0, -1]]), # w
        ]

        self.symm_list = ["E", "Tx2", "Ty2", "Tz2", "R1", "R2", "R3", "R4", "R12", "R22", "R32", "R42", "a", "b", "c", "d", "e", "f", "r", "s", "t", "u", "v", "w"]

        self.ref_mul_tab = np.array([
            [ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23],
            [ 1,  0,  3,  2,  6,  7,  4,  5, 11, 10,  9,  8, 17, 22, 20, 21, 23, 12, 19, 18, 14, 15, 13, 16],
            [ 2,  3,  0,  1,  5,  4,  7,  6, 10, 11,  8,  9, 18, 23, 15, 14, 22, 19, 12, 17, 21, 20, 16, 13],
            [ 3,  2,  1,  0,  7,  6,  5,  4,  9,  8, 11, 10, 19, 16, 21, 20, 13, 18, 17, 12, 15, 14, 23, 22],
            [ 4,  7,  6,  5,  8, 11,  9, 10,  0,  2,  1,  3, 20, 19, 23, 16, 17, 15, 14, 21, 22, 13, 12, 18],
            [ 5,  6,  7,  4, 10,  9, 11,  8,  2,  0,  3,  1, 21, 17, 13, 22, 19, 14, 15, 20, 16, 23, 18, 12],
            [ 6,  5,  4,  7, 11,  8, 10,  9,  1,  3,  0,  2, 14, 18, 16, 23, 12, 21, 20, 15, 13, 22, 17, 19],
            [ 7,  4,  5,  6,  9, 10,  8, 11,  3,  1,  2,  0, 15, 12, 22, 13, 18, 20, 21, 14, 23, 16, 19, 17],
            [ 8, 10,  9, 11,  0,  3,  2,  1,  4,  6,  7,  5, 22, 21, 18, 17, 15, 16, 23, 13, 12, 19, 20, 14],
            [ 9, 11,  8, 10,  3,  0,  1,  2,  7,  5,  4,  6, 23, 14, 17, 18, 20, 13, 22, 16, 19, 12, 15, 21],
            [10,  8, 11,  9,  2,  1,  0,  3,  5,  7,  6,  4, 16, 20, 12, 19, 14, 22, 13, 23, 18, 17, 21, 15],
            [11,  9, 10,  8,  1,  2,  3,  0,  6,  4,  5,  7, 13, 15, 19, 12, 21, 23, 16, 22, 17, 18, 14, 20],
            [12, 17, 19, 18, 23, 22, 16, 13, 21, 20, 14, 15,  0,  7, 10, 11, 6,  1,  3,  2,  9,  8,  5,  4 ],
            [13, 23, 22, 16, 20, 14, 21, 15, 18, 17, 19, 12, 11,  0,  5,  7, 3,  9,  8, 10,  4,  6,  2,  1 ],
            [14, 21, 15, 20, 19, 17, 12, 18, 22, 13, 16, 23,  6,  9,  0,  2, 10,  5,  7,  4,  3,  1,  8, 11],
            [15, 20, 14, 21, 17, 19, 18, 12, 16, 23, 22, 13,  7, 11,  2,  0, 8,  4,  6,  5,  1,  3, 10,  9 ],
            [16, 22, 23, 13, 15, 21, 14, 20, 17, 18, 12, 19, 10,  3,  6,  4, 0,  8,  9, 11,  7,  5,  1,  2 ],
            [17, 12, 18, 19, 16, 13, 23, 22, 15, 14, 20, 21,  1,  5,  9,  8, 4,  0,  2,  3, 10, 11,  7,  6 ],
            [18, 19, 17, 12, 13, 16, 22, 23, 20, 21, 15, 14,  2,  6,  8,  9, 7,  3,  1,  0, 11, 10,  4,  5 ],
            [19, 18, 12, 17, 22, 23, 13, 16, 14, 15, 21, 20,  3,  4, 11, 10, 5,  2,  0,  1,  8,  9,  6,  7 ],
            [20, 15, 21, 14, 18, 12, 17, 19, 13, 22, 23, 16,  4, 10,  1,  3, 9,  7,  5,  6,  2,  0, 11,  8 ],
            [21, 14, 20, 15, 12, 18, 19, 17, 23, 16, 13, 22,  5,  8,  3,  1, 11,  6,  4,  7,  0,  2,  9, 10],
            [22, 16, 13, 23, 14, 20, 15, 21, 19, 12, 18, 17,  8,  1,  7,  5, 2, 10, 11,  9,  6,  4,  3,  0 ],
            [23, 13, 16, 22, 21, 15, 20, 14, 12, 19, 17, 18,  9,  2,  4,  6, 1, 11, 10,  8,  5,  7,  0,  3 ]])

        self.ref_mul_tab_keys = [
            ['E',   'Tx2', 'Ty2', 'Tz2', 'R1',  'R2',  'R3',  'R4',  'R12', 'R22', 'R32', 'R42', 'a',   'b',   'c',   'd',   'e',   'f',   'r',   's',   't',   'u',   'v',   'w'  ],
            ['Tx2', 'E',   'Tz2', 'Ty2', 'R3',  'R4',  'R1',  'R2',  'R42', 'R32', 'R22', 'R12', 'f',   'v',   't',   'u',   'w',   'a',   's',   'r',   'c',   'd',   'b',   'e'  ],
            ['Ty2', 'Tz2', 'E',   'Tx2', 'R2',  'R1',  'R4',  'R3',  'R32', 'R42', 'R12', 'R22', 'r',   'w',   'd',   'c',   'v',   's',   'a',   'f',   'u',   't',   'e',   'b'  ],
            ['Tz2', 'Ty2', 'Tx2', 'E',   'R4',  'R3',  'R2',  'R1',  'R22', 'R12', 'R42', 'R32', 's',   'e',   'u',   't',   'b',   'r',   'f',   'a',   'd',   'c',   'w',   'v'  ],
            ['R1',  'R4',  'R3',  'R2',  'R12', 'R42', 'R22', 'R32', 'E',   'Ty2', 'Tx2', 'Tz2', 't',   's',   'w',   'e',   'f',   'd',   'c',   'u',   'v',   'b',   'a',   'r'  ],
            ['R2',  'R3',  'R4',  'R1',  'R32', 'R22', 'R42', 'R12', 'Ty2', 'E',   'Tz2', 'Tx2', 'u',   'f',   'b',   'v',   's',   'c',   'd',   't',   'e',   'w',   'r',   'a'  ],
            ['R3',  'R2',  'R1',  'R4',  'R42', 'R12', 'R32', 'R22', 'Tx2', 'Tz2', 'E',   'Ty2', 'c',   'r',   'e',   'w',   'a',   'u',   't',   'd',   'b',   'v',   'f',   's'  ],
            ['R4',  'R1',  'R2',  'R3',  'R22', 'R32', 'R12', 'R42', 'Tz2', 'Tx2', 'Ty2', 'E',   'd',   'a',   'v',   'b',   'r',   't',   'u',   'c',   'w',   'e',   's',   'f'  ],
            ['R12', 'R32', 'R22', 'R42', 'E',   'Tz2', 'Ty2', 'Tx2', 'R1',  'R3',  'R4',  'R2',  'v',   'u',   'r',   'f',   'd',   'e',   'w',   'b',   'a',   's',   't',   'c'  ],
            ['R22', 'R42', 'R12', 'R32', 'Tz2', 'E',   'Tx2', 'Ty2', 'R4',  'R2',  'R1',  'R3',  'w',   'c',   'f',   'r',   't',   'b',   'v',   'e',   's',   'a',   'd',   'u'  ],
            ['R32', 'R12', 'R42', 'R22', 'Ty2', 'Tx2', 'E',   'Tz2', 'R2',  'R4',  'R3',  'R1',  'e',   't',   'a',   's',   'c',   'v',   'b',   'w',   'r',   'f',   'u',   'd'  ],
            ['R42', 'R22', 'R32', 'R12', 'Tx2', 'Ty2', 'Tz2', 'E',   'R3',  'R1',  'R2',  'R4',  'b',   'd',   's',   'a',   'u',   'w',   'e',   'v',   'f',   'r',   'c',   't'  ],
            ['a',   'f',   's',   'r',   'w',   'v',   'e',   'b',   'u',   't',   'c',   'd',   'E',   'R4',  'R32', 'R42', 'R3',  'Tx2', 'Tz2', 'Ty2', 'R22', 'R12', 'R2',  'R1' ],
            ['b',   'w',   'v',   'e',   't',   'c',   'u',   'd',   'r',   'f',   's',   'a',   'R42', 'E',   'R2',  'R4',  'Tz2', 'R22', 'R12', 'R32', 'R1',  'R3',  'Ty2', 'Tx2'],
            ['c',   'u',   'd',   't',   's',   'f',   'a',   'r',   'v',   'b',   'e',   'w',   'R3',  'R22', 'E',   'Ty2', 'R32', 'R2',  'R4',  'R1',  'Tz2', 'Tx2', 'R12', 'R42'],
            ['d',   't',   'c',   'u',   'f',   's',   'r',   'a',   'e',   'w',   'v',   'b',   'R4',  'R42', 'Ty2', 'E',   'R12', 'R1',  'R3',  'R2',  'Tx2', 'Tz2', 'R32', 'R22'],
            ['e',   'v',   'w',   'b',   'd',   'u',   'c',   't',   'f',   'r',   'a',   's',   'R32', 'Tz2', 'R3',  'R1',  'E',   'R12', 'R22', 'R42', 'R4',  'R2',  'Tx2', 'Ty2'],
            ['f',   'a',   'r',   's',   'e',   'b',   'w',   'v',   'd',   'c',   't',   'u',   'Tx2', 'R2',  'R22', 'R12', 'R1',  'E',   'Ty2', 'Tz2', 'R32', 'R42', 'R4',  'R3' ],
            ['r',   's',   'f',   'a',   'b',   'e',   'v',   'w',   't',   'u',   'd',   'c',   'Ty2', 'R3',  'R12', 'R22', 'R4',  'Tz2', 'Tx2', 'E',   'R42', 'R32', 'R1',  'R2' ],
            ['s',   'r',   'a',   'f',   'v',   'w',   'b',   'e',   'c',   'd',   'u',   't',   'Tz2', 'R1',  'R42', 'R32', 'R2',  'Ty2', 'E',   'Tx2', 'R12', 'R22', 'R3',  'R4' ],
            ['t',   'd',   'u',   'c',   'r',   'a',   'f',   's',   'b',   'v',   'w',   'e',   'R1',  'R32', 'Tx2', 'Tz2', 'R22', 'R4',  'R2',  'R3',  'Ty2', 'E',   'R42', 'R12'],
            ['u',   'c',   't',   'd',   'a',   'r',   's',   'f',   'w',   'e',   'b',   'v',   'R2',  'R12', 'Tz2', 'Tx2', 'R42', 'R3',  'R1',  'R4',  'E',   'Ty2', 'R22', 'R32'],
            ['v',   'e',   'b',   'w',   'c',   't',   'd',   'u',   's',   'a',   'r',   'f',   'R12', 'Tx2', 'R4',  'R2',  'Ty2', 'R32', 'R42', 'R22', 'R3',  'R1',  'Tz2', 'E'  ],
            ['w',   'b',   'e',   'v',   'u',   'd',   't',   'c',   'a',   's',   'f',   'r',   'R22', 'Ty2', 'R1',  'R3',  'Tx2', 'R42', 'R32', 'R12', 'R2',  'R4',  'E',   'Tz2']]

    def print_mul_tab(self, table=None):
        if table is not None:
            if type(table)!=list: 
                table = list(table)
            print(tabulate.tabulate(table, tablefmt="grid"))
        else:
            print('Reference table for tetrahedron symmetry group:\n', tabulate.tabulate(self.ref_mul_tab_keys, tablefmt="grid"))

    def test_mul_tab(self, gen_mul_tab):
        if np.allclose(gen_mul_tab, self.ref_mul_tab): print(f'test case for multiplication table {color.GREEN}PASSED{color.RESET}')
        else: print(f'test case for multiplication table {color.RED}FAILED{color.RESET}')


def plot_spherical_points(initial_vector, symmetry_matrices):
    transformed_vectors = [matrix @ initial_vector for matrix in symmetry_matrices]
    transformed_vectors = np.array(transformed_vectors)

    colors = cm.rainbow(np.linspace(0, 1, len(transformed_vectors)))

    fig = plt.figure(figsize=(5,5))
    ax = fig.add_subplot(111, projection='3d')
    ax.set_title("Symmetric Transformations of Initial Vector [1, 0, 0] with Rainbow Colors")

    ax.quiver(0, 0, 0, initial_vector[0], initial_vector[1], initial_vector[2], color='r', label='Original Vector')

    for i, vector in enumerate(transformed_vectors):
        ax.quiver(0, 0, 0, vector[0], vector[1], vector[2], color=colors[i], alpha=0.8)

    ax.set_xlim([-1.5, 1.5]); ax.set_ylim([-1.5, 1.5]); ax.set_zlim([-1.5, 1.5])
    ax.set_xlabel("X"); ax.set_ylabel("Y"); ax.set_zlabel("Z")

    ax.legend(); plt.savefig('sphere',dpi=300)
    

class octa_symm_group():
    def __init__(self):
        tetra_symm = tetra_symm_group()
        
        self.symmetry_matrices = tetra_symm.symmetry_matrices.copy()
        inversion_matrix = - np.eye(3)
        for i in range(len(tetra_symm.symmetry_matrices)):
            self.symmetry_matrices.append( inversion_matrix @ tetra_symm.symmetry_matrices[i] )

        # self.ref_mul_tab = np.zeros([len(self.symmetry_matrices), len(self.symmetry_matrices)])

        self.ref_mul_tab = np.array(
            [[0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47], 
            [1,  0,  3,  2,  6,  7,  4,  5,  11,  10,  9,  8,  17,  22,  20,  21,  23,  12,  19,  18,  14,  15,  13,  16,  25,  24,  27,  26,  30,  31,  28,  29,  35,  34,  33,  32,  41,  46,  44,  45,  47,  36,  43,  42,  38,  39,  37,  40], 
            [2,  3,  0,  1,  5,  4,  7,  6,  10,  11,  8,  9,  18,  23,  15,  14,  22,  19,  12,  17,  21,  20,  16,  13,  26,  27,  24,  25,  29,  28,  31,  30,  34,  35,  32,  33,  42,  47,  39,  38,  46,  43,  36,  41,  45,  44,  40,  37], 
            [3,  2,  1,  0,  7,  6,  5,  4,  9,  8,  11,  10,  19,  16,  21,  20,  13,  18,  17,  12,  15,  14,  23,  22,  27,  26,  25,  24,  31,  30,  29,  28,  33,  32,  35,  34,  43,  40,  45,  44,  37,  42,  41,  36,  39,  38,  47,  46], 
            [4,  7,  6,  5,  8,  11,  9,  10,  0,  2,  1,  3,  20,  19,  23,  16,  17,  15,  14,  21,  22,  13,  12,  18,  28,  31,  30,  29,  32,  35,  33,  34,  24,  26,  25,  27,  44,  43,  47,  40,  41,  39,  38,  45,  46,  37,  36,  42], 
            [5,  6,  7,  4,  10,  9,  11,  8,  2,  0,  3,  1,  21,  17,  13,  22,  19,  14,  15,  20,  16,  23,  18,  12,  29,  30,  31,  28,  34,  33,  35,  32,  26,  24,  27,  25,  45,  41,  37,  46,  43,  38,  39,  44,  40,  47,  42,  36], 
            [6,  5,  4,  7,  11,  8,  10,  9,  1,  3,  0,  2,  14,  18,  16,  23,  12,  21,  20,  15,  13,  22,  17,  19,  30,  29,  28,  31,  35,  32,  34,  33,  25,  27,  24,  26,  38,  42,  40,  47,  36,  45,  44,  39,  37,  46,  41,  43], 
            [7,  4,  5,  6,  9,  10,  8,  11,  3,  1,  2,  0,  15,  12,  22,  13,  18,  20,  21,  14,  23,  16,  19,  17,  31,  28,  29,  30,  33,  34,  32,  35,  27,  25,  26,  24,  39,  36,  46,  37,  42,  44,  45,  38,  47,  40,  43,  41], 
            [8,  10,  9,  11,  0,  3,  2,  1,  4,  6,  7,  5,  22,  21,  18,  17,  15,  16,  23,  13,  12,  19,  20,  14,  32,  34,  33,  35,  24,  27,  26,  25,  28,  30,  31,  29,  46,  45,  42,  41,  39,  40,  47,  37,  36,  43,  44,  38], 
            [9,  11,  8,  10,  3,  0,  1,  2,  7,  5,  4,  6,  23,  14,  17,  18,  20,  13,  22,  16,  19,  12,  15,  21,  33,  35,  32,  34,  27,  24,  25,  26,  31,  29,  28,  30,  47,  38,  41,  42,  44,  37,  46,  40,  43,  36,  39,  45], 
            [10,  8,  11,  9,  2,  1,  0,  3,  5,  7,  6,  4,  16,  20,  12,  19,  14,  22,  13,  23,  18,  17,  21,  15,  34,  32,  35,  33,  26,  25,  24,  27,  29,  31,  30,  28,  40,  44,  36,  43,  38,  46,  37,  47,  42,  41,  45,  39], 
            [11,  9,  10,  8,  1,  2,  3,  0,  6,  4,  5,  7,  13,  15,  19,  12,  21,  23,  16,  22,  17,  18,  14,  20,  35,  33,  34,  32,  25,  26,  27,  24,  30,  28,  29,  31,  37,  39,  43,  36,  45,  47,  40,  46,  41,  42,  38,  44], 
            [12,  17,  19,  18,  23,  22,  16,  13,  21,  20,  14,  15,  0,  7,  10,  11,  6,  1,  3,  2,  9,  8,  5,  4,  36,  41,  43,  42,  47,  46,  40,  37,  45,  44,  38,  39,  24,  31,  34,  35,  30,  25,  27,  26,  33,  32,  29,  28], 
            [13,  23,  22,  16,  20,  14,  21,  15,  18,  17,  19,  12,  11,  0,  5,  7,  3,  9,  8,  10,  4,  6,  2,  1,  37,  47,  46,  40,  44,  38,  45,  39,  42,  41,  43,  36,  35,  24,  29,  31,  27,  33,  32,  34,  28,  30,  26,  25], 
            [14,  21,  15,  20,  19,  17,  12,  18,  22,  13,  16,  23,  6,  9,  0,  2,  10,  5,  7,  4,  3,  1,  8,  11,  38,  45,  39,  44,  43,  41,  36,  42,  46,  37,  40,  47,  30,  33,  24,  26,  34,  29,  31,  28,  27,  25,  32,  35], 
            [15,  20,  14,  21,  17,  19,  18,  12,  16,  23,  22,  13,  7,  11,  2,  0,  8,  4,  6,  5,  1,  3,  10,  9,  39,  44,  38,  45,  41,  43,  42,  36,  40,  47,  46,  37,  31,  35,  26,  24,  32,  28,  30,  29,  25,  27,  34,  33], 
            [16,  22,  23,  13,  15,  21,  14,  20,  17,  18,  12,  19,  10,  3,  6,  4,  0,  8,  9,  11,  7,  5,  1,  2,  40,  46,  47,  37,  39,  45,  38,  44,  41,  42,  36,  43,  34,  27,  30,  28,  24,  32,  33,  35,  31,  29,  25,  26], 
            [17,  12,  18,  19,  16,  13,  23,  22,  15,  14,  20,  21,  1,  5,  9,  8,  4,  0,  2,  3,  10,  11,  7,  6,  41,  36,  42,  43,  40,  37,  47,  46,  39,  38,  44,  45,  25,  29,  33,  32,  28,  24,  26,  27,  34,  35,  31,  30], 
            [18,  19,  17,  12,  13,  16,  22,  23,  20,  21,  15,  14,  2,  6,  8,  9,  7,  3,  1,  0,  11,  10,  4,  5,  42,  43,  41,  36,  37,  40,  46,  47,  44,  45,  39,  38,  26,  30,  32,  33,  31,  27,  25,  24,  35,  34,  28,  29], 
            [19,  18,  12,  17,  22,  23,  13,  16,  14,  15,  21,  20,  3,  4,  11,  10,  5,  2,  0,  1,  8,  9,  6,  7,  43,  42,  36,  41,  46,  47,  37,  40,  38,  39,  45,  44,  27,  28,  35,  34,  29,  26,  24,  25,  32,  33,  30,  31], 
            [20,  15,  21,  14,  18,  12,  17,  19,  13,  22,  23,  16,  4,  10,  1,  3,  9,  7,  5,  6,  2,  0,  11,  8,  44,  39,  45,  38,  42,  36,  41,  43,  37,  46,  47,  40,  28,  34,  25,  27,  33,  31,  29,  30,  26,  24,  35,  32], 
            [21,  14,  20,  15,  12,  18,  19,  17,  23,  16,  13,  22,  5,  8,  3,  1,  11,  6,  4,  7,  0,  2,  9,  10,  45,  38,  44,  39,  36,  42,  43,  41,  47,  40,  37,  46,  29,  32,  27,  25,  35,  30,  28,  31,  24,  26,  33,  34], 
            [22,  16,  13,  23,  14,  20,  15,  21,  19,  12,  18,  17,  8,  1,  7,  5,  2,  10,  11,  9,  6,  4,  3,  0,  46,  40,  37,  47,  38,  44,  39,  45,  43,  36,  42,  41,  32,  25,  31,  29,  26,  34,  35,  33,  30,  28,  27,  24], 
            [23,  13,  16,  22,  21,  15,  20,  14,  12,  19,  17,  18,  9,  2,  4,  6,  1,  11,  10,  8,  5,  7,  0,  3,  47,  37,  40,  46,  45,  39,  44,  38,  36,  43,  41,  42,  33,  26,  28,  30,  25,  35,  34,  32,  29,  31,  24,  27], 
            [24,  25,  26,  27,  28,  29,  30,  31,  32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47,  0,  1,  2,  3,  4,  5,  6,  7,  8,  9,  10,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,  22,  23], 
            [25,  24,  27,  26,  30,  31,  28,  29,  35,  34,  33,  32,  41,  46,  44,  45,  47,  36,  43,  42,  38,  39,  37,  40,  1,  0,  3,  2,  6,  7,  4,  5,  11,  10,  9,  8,  17,  22,  20,  21,  23,  12,  19,  18,  14,  15,  13,  16], 
            [26,  27,  24,  25,  29,  28,  31,  30,  34,  35,  32,  33,  42,  47,  39,  38,  46,  43,  36,  41,  45,  44,  40,  37,  2,  3,  0,  1,  5,  4,  7,  6,  10,  11,  8,  9,  18,  23,  15,  14,  22,  19,  12,  17,  21,  20,  16,  13], 
            [27,  26,  25,  24,  31,  30,  29,  28,  33,  32,  35,  34,  43,  40,  45,  44,  37,  42,  41,  36,  39,  38,  47,  46,  3,  2,  1,  0,  7,  6,  5,  4,  9,  8,  11,  10,  19,  16,  21,  20,  13,  18,  17,  12,  15,  14,  23,  22], 
            [28,  31,  30,  29,  32,  35,  33,  34,  24,  26,  25,  27,  44,  43,  47,  40,  41,  39,  38,  45,  46,  37,  36,  42,  4,  7,  6,  5,  8,  11,  9,  10,  0,  2,  1,  3,  20,  19,  23,  16,  17,  15,  14,  21,  22,  13,  12,  18], 
            [29,  30,  31,  28,  34,  33,  35,  32,  26,  24,  27,  25,  45,  41,  37,  46,  43,  38,  39,  44,  40,  47,  42,  36,  5,  6,  7,  4,  10,  9,  11,  8,  2,  0,  3,  1,  21,  17,  13,  22,  19,  14,  15,  20,  16,  23,  18,  12], 
            [30,  29,  28,  31,  35,  32,  34,  33,  25,  27,  24,  26,  38,  42,  40,  47,  36,  45,  44,  39,  37,  46,  41,  43,  6,  5,  4,  7,  11,  8,  10,  9,  1,  3,  0,  2,  14,  18,  16,  23,  12,  21,  20,  15,  13,  22,  17,  19], 
            [31,  28,  29,  30,  33,  34,  32,  35,  27,  25,  26,  24,  39,  36,  46,  37,  42,  44,  45,  38,  47,  40,  43,  41,  7,  4,  5,  6,  9,  10,  8,  11,  3,  1,  2,  0,  15,  12,  22,  13,  18,  20,  21,  14,  23,  16,  19,  17], 
            [32,  34,  33,  35,  24,  27,  26,  25,  28,  30,  31,  29,  46,  45,  42,  41,  39,  40,  47,  37,  36,  43,  44,  38,  8,  10,  9,  11,  0,  3,  2,  1,  4,  6,  7,  5,  22,  21,  18,  17,  15,  16,  23,  13,  12,  19,  20,  14], 
            [33,  35,  32,  34,  27,  24,  25,  26,  31,  29,  28,  30,  47,  38,  41,  42,  44,  37,  46,  40,  43,  36,  39,  45,  9,  11,  8,  10,  3,  0,  1,  2,  7,  5,  4,  6,  23,  14,  17,  18,  20,  13,  22,  16,  19,  12,  15,  21], 
            [34,  32,  35,  33,  26,  25,  24,  27,  29,  31,  30,  28,  40,  44,  36,  43,  38,  46,  37,  47,  42,  41,  45,  39,  10,  8,  11,  9,  2,  1,  0,  3,  5,  7,  6,  4,  16,  20,  12,  19,  14,  22,  13,  23,  18,  17,  21,  15], 
            [35,  33,  34,  32,  25,  26,  27,  24,  30,  28,  29,  31,  37,  39,  43,  36,  45,  47,  40,  46,  41,  42,  38,  44,  11,  9,  10,  8,  1,  2,  3,  0,  6,  4,  5,  7,  13,  15,  19,  12,  21,  23,  16,  22,  17,  18,  14,  20], 
            [36,  41,  43,  42,  47,  46,  40,  37,  45,  44,  38,  39,  24,  31,  34,  35,  30,  25,  27,  26,  33,  32,  29,  28,  12,  17,  19,  18,  23,  22,  16,  13,  21,  20,  14,  15,  0,  7,  10,  11,  6,  1,  3,  2,  9,  8,  5,  4], 
            [37,  47,  46,  40,  44,  38,  45,  39,  42,  41,  43,  36,  35,  24,  29,  31,  27,  33,  32,  34,  28,  30,  26,  25,  13,  23,  22,  16,  20,  14,  21,  15,  18,  17,  19,  12,  11,  0,  5,  7,  3,  9,  8,  10,  4,  6,  2,  1], 
            [38,  45,  39,  44,  43,  41,  36,  42,  46,  37,  40,  47,  30,  33,  24,  26,  34,  29,  31,  28,  27,  25,  32,  35,  14,  21,  15,  20,  19,  17,  12,  18,  22,  13,  16,  23,  6,  9,  0,  2,  10,  5,  7,  4,  3,  1,  8,  11], 
            [39,  44,  38,  45,  41,  43,  42,  36,  40,  47,  46,  37,  31,  35,  26,  24,  32,  28,  30,  29,  25,  27,  34,  33,  15,  20,  14,  21,  17,  19,  18,  12,  16,  23,  22,  13,  7,  11,  2,  0,  8,  4,  6,  5,  1,  3,  10,  9], 
            [40,  46,  47,  37,  39,  45,  38,  44,  41,  42,  36,  43,  34,  27,  30,  28,  24,  32,  33,  35,  31,  29,  25,  26,  16,  22,  23,  13,  15,  21,  14,  20,  17,  18,  12,  19,  10,  3,  6,  4,  0,  8,  9,  11,  7,  5,  1,  2], 
            [41,  36,  42,  43,  40,  37,  47,  46,  39,  38,  44,  45,  25,  29,  33,  32,  28,  24,  26,  27,  34,  35,  31,  30,  17,  12,  18,  19,  16,  13,  23,  22,  15,  14,  20,  21,  1,  5,  9,  8,  4,  0,  2,  3,  10,  11,  7,  6], 
            [42,  43,  41,  36,  37,  40,  46,  47,  44,  45,  39,  38,  26,  30,  32,  33,  31,  27,  25,  24,  35,  34,  28,  29,  18,  19,  17,  12,  13,  16,  22,  23,  20,  21,  15,  14,  2,  6,  8,  9,  7,  3,  1,  0,  11,  10,  4,  5], 
            [43,  42,  36,  41,  46,  47,  37,  40,  38,  39,  45,  44,  27,  28,  35,  34,  29,  26,  24,  25,  32,  33,  30,  31,  19,  18,  12,  17,  22,  23,  13,  16,  14,  15,  21,  20,  3,  4,  11,  10,  5,  2,  0,  1,  8,  9,  6,  7], 
            [44,  39,  45,  38,  42,  36,  41,  43,  37,  46,  47,  40,  28,  34,  25,  27,  33,  31,  29,  30,  26,  24,  35,  32,  20,  15,  21,  14,  18,  12,  17,  19,  13,  22,  23,  16,  4,  10,  1,  3,  9,  7,  5,  6,  2,  0,  11,  8], 
            [45,  38,  44,  39,  36,  42,  43,  41,  47,  40,  37,  46,  29,  32,  27,  25,  35,  30,  28,  31,  24,  26,  33,  34,  21,  14,  20,  15,  12,  18,  19,  17,  23,  16,  13,  22,  5,  8,  3,  1,  11,  6,  4,  7,  0,  2,  9,  10], 
            [46,  40,  37,  47,  38,  44,  39,  45,  43,  36,  42,  41,  32,  25,  31,  29,  26,  34,  35,  33,  30,  28,  27,  24,  22,  16,  13,  23,  14,  20,  15,  21,  19,  12,  18,  17,  8,  1,  7,  5,  2,  10,  11,  9,  6,  4,  3,  0], 
            [47,  37,  40,  46,  45,  39,  44,  38,  36,  43,  41,  42,  33,  26,  28,  30,  25,  35,  34,  32,  29,  31,  24,  27,  23,  13,  16,  22,  21,  15,  20,  14,  12,  19,  17,  18,  9,  2,  4,  6,  1,  11,  10,  8,  5,  7,  0,  3]]) # TODO

    def print_info(self):
        print(self)


class mmc_symm_group_reduced:
    def __init__(self):
        # Alternate representation taken from https://lampz.tugraz.at/~hadley/ss2/crystalphysics/crystalclasses/crystalclasses.html
        # Note: This symmetry representation may not handle the second atom in the primitive cell correctly; need to confirm
        self.symmetry_matrices = [
            np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]]), #E
            np.array([[1/2, -np.sqrt(3)/2, 0], [np.sqrt(3)/2, 1/2, 0], [0, 0, 1]]), #C6
            np.array([[-1/2, -np.sqrt(3)/2, 0], [np.sqrt(3)/2, -1/2, 0], [0, 0, 1]]), #C3
            np.array([[-1, 0, 0], [0, -1, 0], [0, 0, 1]]), #C2
            np.array([[-1/2, np.sqrt(3)/2, 0], [-np.sqrt(3)/2, -1/2, 0], [0, 0, 1]]), #C32
            np.array([[1/2, np.sqrt(3)/2, 0], [-np.sqrt(3)/2, 1/2, 0], [0, 0, 1]]), #C65
            np.array([[-1, 0, 0], [0, 1, 0], [0, 0, 1]]), #sigmav
            np.array([[-1/2, -np.sqrt(3)/2, 0], [-np.sqrt(3)/2, 1/2, 0], [0, 0, 1]]), #C6v
            np.array([[1/2, -np.sqrt(3)/2, 0], [-np.sqrt(3)/2, -1/2, 0], [0, 0, 1]]), #C3v
            np.array([[1, 0, 0], [0, -1, 0], [0, 0, 1]]), #sigmav'
            np.array([[1/2, np.sqrt(3)/2, 0], [np.sqrt(3)/2, -1/2, 0], [0, 0, 1]]), #C3v2
            np.array([[-1/2, np.sqrt(3)/2, 0], [np.sqrt(3)/2, 1/2, 0], [0, 0, 1]]), #C6v5
            np.array([[1, 0, 0], [0, 1, 0], [0, 0, -1]]), #sigmah
            np.array([[1/2, -np.sqrt(3)/2, 0], [np.sqrt(3)/2, 1/2, 0], [0, 0, -1]]), # C6h
            np.array([[-1/2, -np.sqrt(3)/2, 0], [np.sqrt(3)/2, -1/2, 0], [0, 0, -1]]), #C3h
            np.array([[-1, 0, 0], [0, -1, 0], [0, 0, -1]]), #I
            np.array([[-1/2, np.sqrt(3)/2, 0], [-np.sqrt(3)/2, -1/2, 0], [0, 0, -1]]), #C3h2
            np.array([[1/2, np.sqrt(3)/2, 0], [-np.sqrt(3)/2, 1/2, 0], [0, 0, -1]]), #C6h5
            np.array([[-1, 0, 0], [0, 1, 0], [0, 0, -1]]), #C2''
            np.array([[-1/2, -np.sqrt(3)/2, 0], [-np.sqrt(3)/2, 1/2, 0], [0, 0, -1]]), #C6vh
            np.array([[1/2, -np.sqrt(3)/2, 0], [-np.sqrt(3)/2, -1/2, 0], [0, 0, -1]]), #C3vh
            np.array([[1, 0, 0], [0, -1, 0], [0, 0, -1]]), #C2'
            np.array([[1/2, np.sqrt(3)/2, 0], [np.sqrt(3)/2, -1/2, 0], [0, 0, -1]]), #C3vh2
            np.array([[-1/2, np.sqrt(3)/2, 0], [np.sqrt(3)/2, 1/2, 0], [0, 0, -1]]) #C6vh5
        ]

class mmc_symm_group():
    def __init__(self, base_vec):
        # Hanfeng's original implementation
        self.base_vec = base_vec 
        if isinstance(self.base_vec, np.ndarray):
            x, y, z = self.base_vec[0], self.base_vec[1], self.base_vec[2]
            self.symmetry_matrices = [
                np.array([[x*(x - y)/(x**2 + y**2 + z**2), y*(x - y)/(x**2 + y**2 + z**2), z*(x - y)/(x**2 + y**2 + z**2)],
                        [x**2/(x**2 + y**2 + z**2), x*y/(x**2 + y**2 + z**2), x*z/(x**2 + y**2 + z**2)],
                        [x*(z + 0.5)/(x**2 + y**2 + z**2), y*(z + 0.5)/(x**2 + y**2 + z**2), z*(z + 0.5)/(x**2 + y**2 + z**2)]]),

                np.array([[-x*y/(x**2 + y**2 + z**2), -y**2/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2)],
                        [x*(x - y)/(x**2 + y**2 + z**2), y*(x - y)/(x**2 + y**2 + z**2), z*(x - y)/(x**2 + y**2 + z**2)],
                        [x*z/(x**2 + y**2 + z**2), y*z/(x**2 + y**2 + z**2), z**2/(x**2 + y**2 + z**2)]]),

                np.array([[-x**2/(x**2 + y**2 + z**2), -x*y/(x**2 + y**2 + z**2), -x*z/(x**2 + y**2 + z**2)],
                        [-x*y/(x**2 + y**2 + z**2), -y**2/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2)],
                        [x*(z + 0.5)/(x**2 + y**2 + z**2), y*(z + 0.5)/(x**2 + y**2 + z**2), z*(z + 0.5)/(x**2 + y**2 + z**2)]]),

                np.array([[x*(-x + y)/(x**2 + y**2 + z**2), y*(-x + y)/(x**2 + y**2 + z**2), z*(-x + y)/(x**2 + y**2 + z**2)],
                        [-x**2/(x**2 + y**2 + z**2), -x*y/(x**2 + y**2 + z**2), -x*z/(x**2 + y**2 + z**2)],
                        [x*z/(x**2 + y**2 + z**2), y*z/(x**2 + y**2 + z**2), z**2/(x**2 + y**2 + z**2)]]),

                np.array([[x*y/(x**2 + y**2 + z**2), y**2/(x**2 + y**2 + z**2), y*z/(x**2 + y**2 + z**2)],
                        [x*(-x + y)/(x**2 + y**2 + z**2), y*(-x + y)/(x**2 + y**2 + z**2), z*(-x + y)/(x**2 + y**2 + z**2)],
                        [x*(z + 0.5)/(x**2 + y**2 + z**2), y*(z + 0.5)/(x**2 + y**2 + z**2), z*(z + 0.5)/(x**2 + y**2 + z**2)]]),

                np.array([[-x*y/(x**2 + y**2 + z**2), -y**2/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2)],
                        [-x**2/(x**2 + y**2 + z**2), -x*y/(x**2 + y**2 + z**2), -x*z/(x**2 + y**2 + z**2)],
                        [-x*(z - 0.5)/(x**2 + y**2 + z**2), -y*(z - 0.5)/(x**2 + y**2 + z**2), -z*(z - 0.5)/(x**2 + y**2 + z**2)]]),

                np.array([[x*(x - y)/(x**2 + y**2 + z**2), y*(x - y)/(x**2 + y**2 + z**2), z*(x - y)/(x**2 + y**2 + z**2)],
                        [-x*y/(x**2 + y**2 + z**2), -y**2/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2)],
                        [-x*z/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2), -z**2/(x**2 + y**2 + z**2)]]),

                np.array([[x**2/(x**2 + y**2 + z**2), x*y/(x**2 + y**2 + z**2), x*z/(x**2 + y**2 + z**2)],
                        [x*(x - y)/(x**2 + y**2 + z**2), y*(x - y)/(x**2 + y**2 + z**2), z*(x - y)/(x**2 + y**2 + z**2)],
                        [-x*(z - 0.5)/(x**2 + y**2 + z**2), -y*(z - 0.5)/(x**2 + y**2 + z**2), -z*(z - 0.5)/(x**2 + y**2 + z**2)]]),

                np.array([[x*y/(x**2 + y**2 + z**2), y**2/(x**2 + y**2 + z**2), y*z/(x**2 + y**2 + z**2)],
                        [x**2/(x**2 + y**2 + z**2), x*y/(x**2 + y**2 + z**2), x*z/(x**2 + y**2 + z**2)],
                        [-x*z/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2), -z**2/(x**2 + y**2 + z**2)]]),

                np.array([[x*(-x + y)/(x**2 + y**2 + z**2), y*(-x + y)/(x**2 + y**2 + z**2), z*(-x + y)/(x**2 + y**2 + z**2)],
                        [x*y/(x**2 + y**2 + z**2), y**2/(x**2 + y**2 + z**2), y*z/(x**2 + y**2 + z**2)],
                        [-x*(z - 0.5)/(x**2 + y**2 + z**2), -y*(z - 0.5)/(x**2 + y**2 + z**2), -z*(z - 0.5)/(x**2 + y**2 + z**2)]]),

                np.array([[-x**2/(x**2 + y**2 + z**2), -x*y/(x**2 + y**2 + z**2), -x*z/(x**2 + y**2 + z**2)],
                        [x*(-x + y)/(x**2 + y**2 + z**2), y*(-x + y)/(x**2 + y**2 + z**2), z*(-x + y)/(x**2 + y**2 + z**2)],
                        [-x*z/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2), -z**2/(x**2 + y**2 + z**2)]]),

                np.array([[-x**2/(x**2 + y**2 + z**2), -x*y/(x**2 + y**2 + z**2), -x*z/(x**2 + y**2 + z**2)],
                        [-x*y/(x**2 + y**2 + z**2), -y**2/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2)],
                        [-x*z/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2), -z**2/(x**2 + y**2 + z**2)]]),

                np.array([[x*(-x + y)/(x**2 + y**2 + z**2), y*(-x + y)/(x**2 + y**2 + z**2), z*(-x + y)/(x**2 + y**2 + z**2)],
                        [-x**2/(x**2 + y**2 + z**2), -x*y/(x**2 + y**2 + z**2), -x*z/(x**2 + y**2 + z**2)],
                        [-x*(z + 0.5)/(x**2 + y**2 + z**2), -y*(z + 0.5)/(x**2 + y**2 + z**2), -z*(z + 0.5)/(x**2 + y**2 + z**2)]]),

                np.array([[x*y/(x**2 + y**2 + z**2), y**2/(x**2 + y**2 + z**2), y*z/(x**2 + y**2 + z**2)],
                        [x*(-x + y)/(x**2 + y**2 + z**2), y*(-x + y)/(x**2 + y**2 + z**2), z*(-x + y)/(x**2 + y**2 + z**2)],
                        [-x*z/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2), -z**2/(x**2 + y**2 + z**2)]]),

                np.array([[x**2/(x**2 + y**2 + z**2), x*y/(x**2 + y**2 + z**2), x*z/(x**2 + y**2 + z**2)],
                        [x*y/(x**2 + y**2 + z**2), y**2/(x**2 + y**2 + z**2), y*z/(x**2 + y**2 + z**2)],
                        [-x*(z + 0.5)/(x**2 + y**2 + z**2), -y*(z + 0.5)/(x**2 + y**2 + z**2), -z*(z + 0.5)/(x**2 + y**2 + z**2)]]),

                np.array([[x*(x - y)/(x**2 + y**2 + z**2), y*(x - y)/(x**2 + y**2 + z**2), z*(x - y)/(x**2 + y**2 + z**2)],
                        [x**2/(x**2 + y**2 + z**2), x*y/(x**2 + y**2 + z**2), x*z/(x**2 + y**2 + z**2)],
                        [-x*z/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2), -z**2/(x**2 + y**2 + z**2)]]),

                np.array([[-x*y/(x**2 + y**2 + z**2), -y**2/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2)],
                        [x*(x - y)/(x**2 + y**2 + z**2), y*(x - y)/(x**2 + y**2 + z**2), z*(x - y)/(x**2 + y**2 + z**2)],
                        [-x*(z + 0.5)/(x**2 + y**2 + z**2), -y*(z + 0.5)/(x**2 + y**2 + z**2), -z*(z + 0.5)/(x**2 + y**2 + z**2)]]),

                np.array([[x*y/(x**2 + y**2 + z**2), y**2/(x**2 + y**2 + z**2), y*z/(x**2 + y**2 + z**2)],
                        [x**2/(x**2 + y**2 + z**2), x*y/(x**2 + y**2 + z**2), x*z/(x**2 + y**2 + z**2)],
                        [x*(z - 0.5)/(x**2 + y**2 + z**2), y*(z - 0.5)/(x**2 + y**2 + z**2), z*(z - 0.5)/(x**2 + y**2 + z**2)]]),

                np.array([[x*(-x + y)/(x**2 + y**2 + z**2), y*(-x + y)/(x**2 + y**2 + z**2), z*(-x + y)/(x**2 + y**2 + z**2)],
                        [x*y/(x**2 + y**2 + z**2), y**2/(x**2 + y**2 + z**2), y*z/(x**2 + y**2 + z**2)],
                        [x*z/(x**2 + y**2 + z**2), y*z/(x**2 + y**2 + z**2), z**2/(x**2 + y**2 + z**2)]]),

                np.array([[-x**2/(x**2 + y**2 + z**2), -x*y/(x**2 + y**2 + z**2), -x*z/(x**2 + y**2 + z**2)],
                        [x*(-x + y)/(x**2 + y**2 + z**2), y*(-x + y)/(x**2 + y**2 + z**2), z*(-x + y)/(x**2 + y**2 + z**2)],
                        [x*(z - 0.5)/(x**2 + y**2 + z**2), y*(z - 0.5)/(x**2 + y**2 + z**2), z*(z - 0.5)/(x**2 + y**2 + z**2)]]),

                np.array([[-x*y/(x**2 + y**2 + z**2), -y**2/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2)],
                        [-x**2/(x**2 + y**2 + z**2), -x*y/(x**2 + y**2 + z**2), -x*z/(x**2 + y**2 + z**2)],
                        [x*z/(x**2 + y**2 + z**2), y*z/(x**2 + y**2 + z**2), z**2/(x**2 + y**2 + z**2)]]),

                np.array([[x*(x - y)/(x**2 + y**2 + z**2), y*(x - y)/(x**2 + y**2 + z**2), z*(x - y)/(x**2 + y**2 + z**2)],
                        [-x*y/(x**2 + y**2 + z**2), -y**2/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2)],
                        [x*(z - 0.5)/(x**2 + y**2 + z**2), y*(z - 0.5)/(x**2 + y**2 + z**2), z*(z - 0.5)/(x**2 + y**2 + z**2)]]),

                np.array([[x**2/(x**2 + y**2 + z**2), x*y/(x**2 + y**2 + z**2), x*z/(x**2 + y**2 + z**2)],
                        [x*(x - y)/(x**2 + y**2 + z**2), y*(x - y)/(x**2 + y**2 + z**2), z*(x - y)/(x**2 + y**2 + z**2)],
                        [x*z/(x**2 + y**2 + z**2), y*z/(x**2 + y**2 + z**2), z**2/(x**2 + y**2 + z**2)]])]

        if isinstance(self.base_vec, sp.Matrix):
            self.base_vec = sp.Matrix(base_vec)
            x, y, z = sp.symbols('x y z')
            self.symmetry_matrices = [
                sp.Matrix([[x*(x - y)/(x**2 + y**2 + z**2), y*(x - y)/(x**2 + y**2 + z**2), z*(x - y)/(x**2 + y**2 + z**2)], [x**2/(x**2 + y**2 + z**2), x*y/(x**2 + y**2 + z**2), x*z/(x**2 + y**2 + z**2)], [x*(z + 0.5)/(x**2 + y**2 + z**2), y*(z + 0.5)/(x**2 + y**2 + z**2), z*(z + 0.5)/(x**2 + y**2 + z**2)]]),
                sp.Matrix([[-x*y/(x**2 + y**2 + z**2), -y**2/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2)], [x*(x - y)/(x**2 + y**2 + z**2), y*(x - y)/(x**2 + y**2 + z**2), z*(x - y)/(x**2 + y**2 + z**2)], [x*z/(x**2 + y**2 + z**2), y*z/(x**2 + y**2 + z**2), z**2/(x**2 + y**2 + z**2)]]),
                sp.Matrix([[-x**2/(x**2 + y**2 + z**2), -x*y/(x**2 + y**2 + z**2), -x*z/(x**2 + y**2 + z**2)], [-x*y/(x**2 + y**2 + z**2), -y**2/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2)], [x*(z + 0.5)/(x**2 + y**2 + z**2), y*(z + 0.5)/(x**2 + y**2 + z**2), z*(z + 0.5)/(x**2 + y**2 + z**2)]]),
                sp.Matrix([[x*(-x + y)/(x**2 + y**2 + z**2), y*(-x + y)/(x**2 + y**2 + z**2), z*(-x + y)/(x**2 + y**2 + z**2)], [-x**2/(x**2 + y**2 + z**2), -x*y/(x**2 + y**2 + z**2), -x*z/(x**2 + y**2 + z**2)], [x*z/(x**2 + y**2 + z**2), y*z/(x**2 + y**2 + z**2), z**2/(x**2 + y**2 + z**2)]]),
                sp.Matrix([[x*y/(x**2 + y**2 + z**2), y**2/(x**2 + y**2 + z**2), y*z/(x**2 + y**2 + z**2)], [x*(-x + y)/(x**2 + y**2 + z**2), y*(-x + y)/(x**2 + y**2 + z**2), z*(-x + y)/(x**2 + y**2 + z**2)], [x*(z + 0.5)/(x**2 + y**2 + z**2), y*(z + 0.5)/(x**2 + y**2 + z**2), z*(z + 0.5)/(x**2 + y**2 + z**2)]]),
                sp.Matrix([[-x*y/(x**2 + y**2 + z**2), -y**2/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2)], [-x**2/(x**2 + y**2 + z**2), -x*y/(x**2 + y**2 + z**2), -x*z/(x**2 + y**2 + z**2)], [-x*(z - 0.5)/(x**2 + y**2 + z**2), -y*(z - 0.5)/(x**2 + y**2 + z**2), -z*(z - 0.5)/(x**2 + y**2 + z**2)]]),
                sp.Matrix([[x*(x - y)/(x**2 + y**2 + z**2), y*(x - y)/(x**2 + y**2 + z**2), z*(x - y)/(x**2 + y**2 + z**2)], [-x*y/(x**2 + y**2 + z**2), -y**2/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2)], [-x*z/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2), -z**2/(x**2 + y**2 + z**2)]]),
                sp.Matrix([[x**2/(x**2 + y**2 + z**2), x*y/(x**2 + y**2 + z**2), x*z/(x**2 + y**2 + z**2)], [x*(x - y)/(x**2 + y**2 + z**2), y*(x - y)/(x**2 + y**2 + z**2), z*(x - y)/(x**2 + y**2 + z**2)], [-x*(z - 0.5)/(x**2 + y**2 + z**2), -y*(z - 0.5)/(x**2 + y**2 + z**2), -z*(z - 0.5)/(x**2 + y**2 + z**2)]]),
                sp.Matrix([[x*y/(x**2 + y**2 + z**2), y**2/(x**2 + y**2 + z**2), y*z/(x**2 + y**2 + z**2)], [x**2/(x**2 + y**2 + z**2), x*y/(x**2 + y**2 + z**2), x*z/(x**2 + y**2 + z**2)], [-x*z/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2), -z**2/(x**2 + y**2 + z**2)]]),
                sp.Matrix([[x*(-x + y)/(x**2 + y**2 + z**2), y*(-x + y)/(x**2 + y**2 + z**2), z*(-x + y)/(x**2 + y**2 + z**2)], [x*y/(x**2 + y**2 + z**2), y**2/(x**2 + y**2 + z**2), y*z/(x**2 + y**2 + z**2)], [-x*(z - 0.5)/(x**2 + y**2 + z**2), -y*(z - 0.5)/(x**2 + y**2 + z**2), -z*(z - 0.5)/(x**2 + y**2 + z**2)]]),
                sp.Matrix([[-x**2/(x**2 + y**2 + z**2), -x*y/(x**2 + y**2 + z**2), -x*z/(x**2 + y**2 + z**2)], [x*(-x + y)/(x**2 + y**2 + z**2), y*(-x + y)/(x**2 + y**2 + z**2), z*(-x + y)/(x**2 + y**2 + z**2)], [-x*z/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2), -z**2/(x**2 + y**2 + z**2)]]),
                sp.Matrix([[-x**2/(x**2 + y**2 + z**2), -x*y/(x**2 + y**2 + z**2), -x*z/(x**2 + y**2 + z**2)], [-x*y/(x**2 + y**2 + z**2), -y**2/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2)], [-x*z/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2), -z**2/(x**2 + y**2 + z**2)]]),
                sp.Matrix([[x*(-x + y)/(x**2 + y**2 + z**2), y*(-x + y)/(x**2 + y**2 + z**2), z*(-x + y)/(x**2 + y**2 + z**2)], [-x**2/(x**2 + y**2 + z**2), -x*y/(x**2 + y**2 + z**2), -x*z/(x**2 + y**2 + z**2)], [-x*(z + 0.5)/(x**2 + y**2 + z**2), -y*(z + 0.5)/(x**2 + y**2 + z**2), -z*(z + 0.5)/(x**2 + y**2 + z**2)]]),
                sp.Matrix([[x*y/(x**2 + y**2 + z**2), y**2/(x**2 + y**2 + z**2), y*z/(x**2 + y**2 + z**2)], [x*(-x + y)/(x**2 + y**2 + z**2), y*(-x + y)/(x**2 + y**2 + z**2), z*(-x + y)/(x**2 + y**2 + z**2)], [-x*z/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2), -z**2/(x**2 + y**2 + z**2)]]),
                sp.Matrix([[x**2/(x**2 + y**2 + z**2), x*y/(x**2 + y**2 + z**2), x*z/(x**2 + y**2 + z**2)], [x*y/(x**2 + y**2 + z**2), y**2/(x**2 + y**2 + z**2), y*z/(x**2 + y**2 + z**2)], [-x*(z + 0.5)/(x**2 + y**2 + z**2), -y*(z + 0.5)/(x**2 + y**2 + z**2), -z*(z + 0.5)/(x**2 + y**2 + z**2)]]),
                sp.Matrix([[x*(x - y)/(x**2 + y**2 + z**2), y*(x - y)/(x**2 + y**2 + z**2), z*(x - y)/(x**2 + y**2 + z**2)], [x**2/(x**2 + y**2 + z**2), x*y/(x**2 + y**2 + z**2), x*z/(x**2 + y**2 + z**2)], [-x*z/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2), -z**2/(x**2 + y**2 + z**2)]]),
                sp.Matrix([[-x*y/(x**2 + y**2 + z**2), -y**2/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2)], [x*(x - y)/(x**2 + y**2 + z**2), y*(x - y)/(x**2 + y**2 + z**2), z*(x - y)/(x**2 + y**2 + z**2)], [-x*(z + 0.5)/(x**2 + y**2 + z**2), -y*(z + 0.5)/(x**2 + y**2 + z**2), -z*(z + 0.5)/(x**2 + y**2 + z**2)]]),
                sp.Matrix([[x*y/(x**2 + y**2 + z**2), y**2/(x**2 + y**2 + z**2), y*z/(x**2 + y**2 + z**2)], [x**2/(x**2 + y**2 + z**2), x*y/(x**2 + y**2 + z**2), x*z/(x**2 + y**2 + z**2)], [x*(z - 0.5)/(x**2 + y**2 + z**2), y*(z - 0.5)/(x**2 + y**2 + z**2), z*(z - 0.5)/(x**2 + y**2 + z**2)]]),
                sp.Matrix([[x*(-x + y)/(x**2 + y**2 + z**2), y*(-x + y)/(x**2 + y**2 + z**2), z*(-x + y)/(x**2 + y**2 + z**2)], [x*y/(x**2 + y**2 + z**2), y**2/(x**2 + y**2 + z**2), y*z/(x**2 + y**2 + z**2)], [x*z/(x**2 + y**2 + z**2), y*z/(x**2 + y**2 + z**2), z**2/(x**2 + y**2 + z**2)]]),
                sp.Matrix([[-x**2/(x**2 + y**2 + z**2), -x*y/(x**2 + y**2 + z**2), -x*z/(x**2 + y**2 + z**2)], [x*(-x + y)/(x**2 + y**2 + z**2), y*(-x + y)/(x**2 + y**2 + z**2), z*(-x + y)/(x**2 + y**2 + z**2)], [x*(z - 0.5)/(x**2 + y**2 + z**2), y*(z - 0.5)/(x**2 + y**2 + z**2), z*(z - 0.5)/(x**2 + y**2 + z**2)]]),
                sp.Matrix([[-x*y/(x**2 + y**2 + z**2), -y**2/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2)], [-x**2/(x**2 + y**2 + z**2), -x*y/(x**2 + y**2 + z**2), -x*z/(x**2 + y**2 + z**2)], [x*z/(x**2 + y**2 + z**2), y*z/(x**2 + y**2 + z**2), z**2/(x**2 + y**2 + z**2)]]),
                sp.Matrix([[x*(x - y)/(x**2 + y**2 + z**2), y*(x - y)/(x**2 + y**2 + z**2), z*(x - y)/(x**2 + y**2 + z**2)], [-x*y/(x**2 + y**2 + z**2), -y**2/(x**2 + y**2 + z**2), -y*z/(x**2 + y**2 + z**2)], [x*(z - 0.5)/(x**2 + y**2 + z**2), y*(z - 0.5)/(x**2 + y**2 + z**2), z*(z - 0.5)/(x**2 + y**2 + z**2)]]),
                sp.Matrix([[x**2/(x**2 + y**2 + z**2), x*y/(x**2 + y**2 + z**2), x*z/(x**2 + y**2 + z**2)], [x*(x - y)/(x**2 + y**2 + z**2), y*(x - y)/(x**2 + y**2 + z**2), z*(x - y)/(x**2 + y**2 + z**2)], [x*z/(x**2 + y**2 + z**2), y*z/(x**2 + y**2 + z**2), z**2/(x**2 + y**2 + z**2)]])]

    def apply_transform(self):
        mat_list = [self.base_vec]
        if isinstance(self.base_vec, np.ndarray):
            for i, matrix in enumerate(self.symmetry_matrices, start=1):
                transformed_vec = matrix @ self.base_vec.T
                transformed_vec = transformed_vec / np.linalg.norm(transformed_vec)
                mat_list.append(transformed_vec)
        if isinstance(self.base_vec, sp.Matrix):
            for i, matrix in enumerate(self.symmetry_matrices, start=1):
                transformed_vec = matrix * self.base_vec.T
                mat_list.append(sp.simplify(transformed_vec.T))
        return mat_list

    def test_sp_transform(self, transformed_vecs):
        x, y, z = sp.symbols('x y z')
        # Ref.: https://lampz.tugraz.at/~hadley/ss1/crystalstructure/structures/hcp/hcp.php
        self.bench_vectors = [
                sp.Matrix([x, y, z]).T,               # x,y,z
                sp.Matrix([x - y, x, z + 1/2]).T,     # x-y,x,z+1/2
                sp.Matrix([-y, x - y, z]).T,          # -y,x-y,z
                sp.Matrix([-x, -y, z + 1/2]).T,       # -x,-y,z+1/2
                sp.Matrix([-x + y, -x, z]).T,         # -x+y,-x,z
                sp.Matrix([y, -x + y, z + 1/2]).T,    # y,-x+y,z+1/2
                sp.Matrix([-y, -x, -z + 1/2]).T,      # -y,-x,-z+1/2
                sp.Matrix([x - y, -y, -z]).T,         # x-y,-y,-z 
                sp.Matrix([x, x - y, -z+1/2]).T,    # x,x-y,-z+1/2
                sp.Matrix([y, x, -z]).T,              # y,x,-z
                sp.Matrix([-x+y, y, -z+1/2]).T,   # -x+y,y,-z+1/2
                sp.Matrix([-x, -x+y, -z]).T,        # -x,-x+y,-z
                sp.Matrix([-x, -y, -z]).T,            # -x,-y,-z
                sp.Matrix([-x+y, -x, -z-1/2]).T,   # -x+y,-x,-z-1/2
                sp.Matrix([y, -x+y, -z]).T,         # y,-x+y,-z
                sp.Matrix([x, y, -z - 1/2]).T,        # x,y,-z-1/2
                sp.Matrix([x-y, x, -z]).T,          # x-y,x,-z
                sp.Matrix([-y, x-y, -z-1/2]).T,    # -y,x-y,-z-1/2
                sp.Matrix([y, x, z - 1/2]).T,         # y,x,z-1/2
                sp.Matrix([-x+y, y, z]).T,          # -x+y,y,z 
                sp.Matrix([-x, -x+y, z-1/2]).T,     # -x,-x+y,z-1/2
                sp.Matrix([-y, -x, z]).T,              # -y,-x,z
                sp.Matrix([x-y, -y, z-1/2]).T,     # x-y,-y,z-1/2
                sp.Matrix([x, x-y, z]).T            # x,x-y,z 
            ]

        if isinstance(transformed_vecs[1], sp.Basic):
            passed_case = 0
            for i in range(1,24):
                if transformed_vecs[i].equals(self.bench_vectors[i]):
                    passed_case += 1
            if passed_case==23: print(f'test case for P63/mmc transformation {color.GREEN}Pass{color.RESET}')
            else: print(f'test case for P63/mmc transformation {color.RED}Fail{color.RESET}')
        else:
            raise ValueError('{color.RED}input list are not sympy vectors!{color.RESET}')


class DDD_tetra_data_augm_old():
    def __init__(self, loadDirs, loadDirInterp, slip_sys=None, burg_vec=None, slip_plane=None, schmid_factor=None, edotDir=None):
        self.slip_sys = slip_sys
        self.burg_vec = burg_vec
        self.slip_plane = slip_plane
        self.schmid_factor = schmid_factor
        self.slipSystem = {}
        self.loadDirs = loadDirs
        self.loadDirInterp = loadDirInterp

    def print_info(self):
        print(self)
        
    def __str__(self):
        return ('    ##########################################################\n'
                '    #                                                        #\n'
                '    #     Augment DDD Simulations by Tetraheron Symmetry     #\n'
                '    #                                                        #\n'
                '    ##########################################################\n')

    def get_edir(self):
        load_start, load_end = np.array(self.loadDirs[0]) / np.linalg.norm(np.array(self.loadDirs[0])),\
                               np.array(self.loadDirs[1]) / np.linalg.norm(np.array(self.loadDirs[1]))
        edir = (self.loadDirInterp/10)*load_start+(1-self.loadDirInterp/10)*load_end
        self.edotDir = np.array(edir)
        return self.edotDir

    def augment_by_symmetry(self, symmetry_matrices):
        '''Augment the given edotDir vector using the 24 symmetry matrices.'''
        augmented_vectors = []
        for matrix in symmetry_matrices:
            augmented_vectors.append(np.dot(matrix, self.edotDir))
        self.augment_edir = np.array(augmented_vectors)
        self.augment_edir = self.augment_edir / np.linalg.norm(self.augment_edir) # normalize
        return self.augment_edir

    def get_slip_and_Schmid(self):
        self.slip_system, self.Schmid_factor = get_slip_Sbn(self.edotDir)
        return self.slip_system, self.Schmid_factor

    def get_augment_slip_and_Schmid(self):
        self.slip_system_list, self.Schmid_factor_list = [], []
        for i in range(24):
            slip_aug, schmid_aug = get_slip_Sbn(self.augment_edir[i,:])
            self.slip_system_list.append(slip_aug)
            self.Schmid_factor_list.append(schmid_aug)
            del slip_aug, schmid_aug
        return self.slip_system_list, self.Schmid_factor_list

    def augment_schmid_permute(self):
        slip_system_augmented, Schmid_factor_augmented = self.get_augment_slip_and_Schmid()
        self.Schmid_factor_tab = []
        for augm_id in range(24):
            Schmid_factor_per_augm = []
            for slip_id in range(12):
                Schmid_factor_per_augm.append(np.round(slip_system_augmented[augm_id]['SchmidFactor'][slip_id], 3))
            self.Schmid_factor_tab.append(Schmid_factor_per_augm)
        del Schmid_factor_per_augm
        self.Schmid_factor_tab = np.stack(self.Schmid_factor_tab)
        
        original_schmid, self.permutation_indices = [round(value, 3) for value in list(slip_system_augmented[0]['SchmidFactor'].values())[:-1]], []
        for i in range(1, 24):
            augmented_schmid = [round(value, 3) for value in list(slip_system_augmented[i]['SchmidFactor'].values())[:-1]]
            perm_index = [augmented_schmid.index(value) for value in original_schmid]
            self.permutation_indices.append(perm_index)
        self.permutation_indices = np.stack(self.permutation_indices)
        return self.Schmid_factor_tab, self.permutation_indices
    
    def test_permutation_table(self):
        for idx, row in enumerate(self.permutation_indices):
        # Check if the row contains unique numbers from 0 to 11
            if sorted(row) != list(range(12)):
                print(f"Row {idx} is invalid: {row}")
                return False
        print(f"Permutation test {color.GREEN}PASSED{color.RESET}")
        return True


def plot_tetrahedron_symm_sphere(tetra_symm=None, fig_name='tetra_sphere', self_color='lightgreen', n_points=20, plot_shaow=False):
    from scipy.spatial import Delaunay
    fig = plt.figure(figsize=(5, 5))
    plt.rcParams.update({"text.usetex": False, "font.family": "serif", "font.serif": "Times New Roman",
        "mathtext.fontset": "stix", "legend.fontsize": 10,
        "axes.labelsize": 15, "xtick.labelsize": 12, "ytick.labelsize": 12})
    ax = fig.add_subplot(111, projection='3d')
    directions = np.array([[0, 0, 1],
                           [0, 1, 1],
                           [1, 1, 1]])
    reference_triangle = np.array([vec / np.linalg.norm(vec) for vec in directions])

    def interpolate_triangle(v0, v1, v2, n):
        """Interpolate points on a spherical triangle defined by v0, v1, v2."""
        u = np.linspace(0, 1, n)
        v = np.linspace(0, 1, n)
        u, v = np.meshgrid(u, v)
        u = u.flatten()
        v = v.flatten()
        mask = u + v <= 1  # Only points within the triangle
        u, v = u[mask], v[mask]
        w = 1 - u - v  # Barycentric coordinates
        points = np.outer(u, v0) + np.outer(v, v1) + np.outer(w, v2)
        points /= np.linalg.norm(points, axis=1, keepdims=True)  # Project to sphere
        return points, np.column_stack((u, v))

    def plot_triangle(ax, vertices, face_color, alpha):
        """Plot a triangular surface directly on the sphere."""
        v0, v1, v2 = vertices
        points, bary_coords = interpolate_triangle(v0, v1, v2, n_points)
        tri = Delaunay(bary_coords)  # Delaunay triangulation in barycentric space
        x, y, z = points.T
        ax.plot_trisurf(x, y, z, triangles=tri.simplices, color=face_color, alpha=alpha, edgecolor="none")

    for i, matrix in enumerate(tetra_symm.symmetry_matrices):
        transformed_triangle = reference_triangle @ matrix.T
        plot_triangle(ax, transformed_triangle, self_color if i == 0 else 'lightblue', alpha=1.0)

    for i, matrix in enumerate(tetra_symm.symmetry_matrices):
        transformed_triangle = -reference_triangle @ matrix.T
        plot_triangle(ax, transformed_triangle, 'lightcoral', alpha=1.0)
    
    if plot_shaow:
        u = np.linspace(0, 2 * np.pi, 100)
        v = np.linspace(0, np.pi, 100)
        x = np.outer(np.cos(u), np.sin(v))
        y = np.outer(np.sin(u), np.sin(v))
        z = np.outer(np.ones(np.size(u)), np.cos(v))
        
        r = np.sqrt(x**2 + y**2); r_normalized = r / r.max()
        shadow_alpha = 1 - r_normalized; colors = np.zeros(x.shape + (4,))
        colors[..., 0] = 0.5; colors[..., 1] = 0.5; colors[..., 2] = 0.5; 
        colors[..., 3] = shadow_alpha
        shadow_alpha = 0.3; ax.plot_surface(x, y, -1* np.ones_like(x), facecolors=colors, alpha=0.1, shade=True)

    ax.set_box_aspect([1, 1, 1])
    ax.set_facecolor('white')
    limits_box = [-1., 1.]; limits = [-1.05, 1.05]
    ax.set_xlim(limits_box); ax.set_ylim(limits_box); ax.set_zlim(limits_box)
    box_edges = [[[limits[0], limits[1]], [limits[0], limits[0]], [limits[1], limits[1]]], 
                 [[limits[0], limits[0]], [limits[0], limits[1]], [limits[1], limits[1]]],
                 [[limits[0], limits[0]], [limits[1], limits[1]], [limits[0], limits[1]]]]

    grid_spacing = 0.5
    x_ticks = np.arange(-1.0, 1.05, grid_spacing); y_ticks = np.arange(-1.0, 1.05, grid_spacing); z_ticks = np.arange(-1.0, 1.05, grid_spacing)
    ax.set_xticks(x_ticks); ax.set_yticks(y_ticks); ax.set_zticks(z_ticks)

    for edge in box_edges:
        ax.plot(edge[0], edge[1], edge[2], color="black", linestyle="-", linewidth=1)

    ax.view_init(elev=None, azim=60)
    plt.savefig(fig_name, dpi=300)
    plt.show()
